from PIL import Image, ImageDraw, ImageOps
import svgwrite
import base64
import io
import argparse
import time
from pycoral.adapters import common, detect
from pycoral.utils.dataset import read_label_file
from pycoral.utils.edgetpu import make_interpreter

def draw_objects(draw, objs, labels):
    """Draws the bounding box and label for each object."""
    for obj in objs:
        bbox = obj.bbox
        draw.rectangle([(bbox.xmin, bbox.ymin), (bbox.xmax, bbox.ymax)], outline='red')
        draw.text((bbox.xmin + 10, bbox.ymin + 10),
                  '%s\n%.2f' % (labels.get(obj.id, obj.id), obj.score),
                  fill='red')

def png_to_svg(input_path, output_path):
    # Open the PNG image using PIL
    with Image.open(input_path) as img:
        # Get the width and height of the image
        width, height = img.size
        
        # Convert the image to RGBA (if it's not already in that format)
        img = img.convert('RGBA')
        
        # Convert the image to base64
        img_byte_array = io.BytesIO()
        img.save(img_byte_array, format='PNG')
        img_base64 = base64.b64encode(img_byte_array.getvalue()).decode('utf-8')
        
        # Create an SVG drawing object
        dwg = svgwrite.Drawing(output_path, size=(width, height))
        
        # Embed the PNG image into SVG
        img_svg = dwg.image(href=f"data:image/png;base64,{img_base64}", size=(width, height))
        dwg.add(img_svg)
        
        # Save the SVG file
        dwg.save()

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-m', '--model', required=True, help='File path of .tflite file')
    parser.add_argument('-i', '--input', default='j.jpg', help='File path of image to process')
    parser.add_argument('-l', '--labels', help='File path of labels file')
    parser.add_argument('-t', '--threshold', type=float, default=0.4, help='Score threshold for detected objects')
    parser.add_argument('-o', '--output', help='File path for the result image with annotations')
    parser.add_argument('-c', '--count', type=int, default=5, help='Number of times to run inference')
    args = parser.parse_args()

    labels = read_label_file(args.labels) if args.labels else {}
    interpreter = make_interpreter(args.model)
    interpreter.allocate_tensors()

    image = Image.open(args.input)
    _, scale = common.set_resized_input(interpreter, image.size, lambda size: image.resize(size, Image.LANCZOS))

    print('----INFERENCE TIME----')
    print('Note: The first inference is slow because it includes loading the model into Edge TPU memory.')
    for _ in range(args.count):
        start = time.perf_counter()
        interpreter.invoke()
        inference_time = time.perf_counter() - start
        objs = detect.get_objects(interpreter, args.threshold, scale)
        print('%.2f ms' % (inference_time * 1000))

    print('-------RESULTS--------')
    if not objs:
        print('No objects detected')

    for obj in objs:
        print(labels.get(obj.id, obj.id))
        print('  id:    ', obj.id)
        print('  score: ', obj.score)
        print('  bbox:  ', obj.bbox)

    if args.output:
        image = image.convert('RGB')
        mask = Image.new('L', image.size, 0)
        draw = ImageDraw.Draw(mask)
        for obj in objs:
            bbox = obj.bbox
            draw.rectangle([(bbox.xmin, bbox.ymin), (bbox.xmax, bbox.ymax)], fill=255)
        
        result_image = Image.composite(image, ImageOps.invert(image), mask)
        result_image = ImageOps.invert(result_image)
        result_image.save(args.output)

        # Convert the processed image to SVG
        output_svg_path = 'output.svg'
        result_image.save('line_drawing.png')
        png_to_svg('line_drawing.png', output_svg_path)

if __name__ == '__main__':
    main()
https://github.com/google-coral/pycoral/blob/master/examples/detect_image.py
python your_script.py -m path/to/your/model.tflite -i path/to/your/input_image.jpg -l path/to/your/labels.txt -t 0.4 -o output_image.png -c 5

